<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/aop 	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.eqiao.bidata">
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

    <!-- 读取properties配置文件 -->
	<bean id="jdbc" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:bidata/properties/database.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSourceFy" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url.fy}"/>
		<property name="user" value="${jdbc.username.fy}"></property>
		<property name="password" value="${jdbc.password.fy}"></property>
		<!--c3p0的配置-->
		<!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="${jdbc.fy.minPoolSize}"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${jdbc.fy.maxPoolSize}"/>  
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${jdbc.fy.initialPoolSize}"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5"/>
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="0"/>
        <!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
        <property name="maxStatementsPerConnection" value="200"/>
        <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。单位秒 Default: 0 -->
        <property name="maxIdleTime" value="600"/>
        <!-- 自己实现一条SQL检测语句 -->
        <property name="preferredTestQuery" value="SELECT 1"/>
        <!--每60秒检查所有连接池中的空闲连接。单位秒 Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30"/>
        <!--定义在从数据库获取新连接失败后重复尝试的间隔时间。Default: 1000 毫秒-->
        <property name="acquireRetryDelay" value="5000"/>
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出
			SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->
		<property name="checkoutTimeout" value="5000"/>        
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
	                保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
	                获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。
			建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性，
			因为是个事后操作，所以是异步的，应用端不需要等待测试结果，但同样会造成至少多一倍的数据库调用
			建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckin" value="false"/>
    </bean>

    <!-- MyBatis配置 -->
	<bean id="sqlSessionFactoryFy" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceFy" />
		<property name="configLocation" value="classpath:bidata/config/mybatis-config.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations">            
			<list>                     
				<value>classpath*:bidata/mapper/*.xml</value>
			</list>       
	   </property>
	</bean>    
        
    <bean id="sqlSessionFy" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
          <constructor-arg index="0" ref="sqlSessionFactoryFy" />
    </bean>
    
	<!-- jdbc 事务管理 -->
	<bean id="txManagerFy" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceFy" />
	</bean>

    <tx:annotation-driven transaction-manager="txManagerFy" />
    <tx:advice id="txadviceFy" transaction-manager="txManagerFy">
		    <tx:attributes>
			    <tx:method name="save*" propagation="REQUIRED" />
			    <tx:method name="create*" propagation="REQUIRED" />
				<tx:method name="delete*" propagation="REQUIRED" />
				<tx:method name="update*" propagation="REQUIRED" />
				<tx:method name="get*" read-only="true" />
				<tx:method name="load*" read-only="true" />
				<tx:method name="find*" read-only="true" />
				<tx:method name="search*" read-only="true" />
				<tx:method name="*" read-only="true" />
	    	</tx:attributes>
	</tx:advice>

    <!--配置切面 -->
    <aop:config>
        <aop:pointcut id="commonPointcutFy" expression="execution(* com.eqiao.bidata.*.service..*Impl.*(..))"/>
        <aop:advisor advice-ref="txadviceFy" pointcut-ref="commonPointcutFy"/>
    </aop:config>	

</beans>
